import asyncio
import os
import logging
import time
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

ADMIN_TOKEN = os.getenv("ADMIN_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

support_bot = Bot(token=ADMIN_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

client_cache = {}
dialogues = {}        # {user_id: {"username": str, "last_msg": str, "messages": int, "last_time": int}}
last_active = {}      # {user_id: timestamp}
all_clients = set()   # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
operator_online = False

auto_replies = [
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
    "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.",
    "–ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.",
    "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —É–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def support_menu(user_id):
    if user_id == ADMIN_ID:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÇ –î–∏–∞–ª–æ–≥–∏", callback_data="admin_dialogs")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton(text="‚ö° –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã", callback_data="admin_auto_replies")],
            [InlineKeyboardButton(text="üì∂ –û–Ω–ª–∞–π–Ω/–û—Ñ—Ñ–ª–∞–π–Ω", callback_data="admin_toggle_status")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_admin")]
        ])
    else:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üÜò –ü–æ–º–æ—â—å", callback_data="client_help")],
            [InlineKeyboardButton(text="üë• –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –æ–Ω–ª–∞–π–Ω", callback_data="client_operators")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_client")]
        ])

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
async def notify_all_clients(message: str):
    tasks = []
    for uid in all_clients:
        try:
            tasks.append(support_bot.send_message(uid, message))
        except Exception:
            pass
    if tasks:
        await asyncio.gather(*tasks)

# –°—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def start_support(msg: types.Message):
    all_clients.add(msg.from_user.id)
    if msg.from_user.id == ADMIN_ID:
        await msg.answer("üëë <b>–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</b>", reply_markup=support_menu(msg.from_user.id))
    else:
        await msg.answer("üìû <b>–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.</b>\n–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–º–æ—â—å¬ª –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è.",
                         reply_markup=support_menu(msg.from_user.id))

# –ù–∞–∑–∞–¥
@dp.callback_query(lambda c: c.data.startswith("back_"))
async def go_back(cb: types.CallbackQuery):
    await cb.message.answer("‚¨Ö –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=support_menu(cb.from_user.id))

# –ü–æ–º–æ—â—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
@dp.callback_query(lambda c: c.data == "client_help")
async def client_help(cb: types.CallbackQuery):
    if not operator_online:
        return await cb.message.answer("‚ö† –í—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –æ—Ñ—Ñ–ª–∞–π–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                       reply_markup=support_menu(cb.from_user.id))
    await cb.message.answer("‚úç –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º.", reply_markup=support_menu(cb.from_user.id))

# –û–Ω–ª–∞–π–Ω/–û—Ñ—Ñ–ª–∞–π–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
@dp.callback_query(lambda c: c.data == "client_operators")
async def client_operators(cb: types.CallbackQuery):
    status = "üü¢ –û–Ω–ª–∞–π–Ω" if operator_online else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
    await cb.message.answer(f"üë• <b>–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b> {status}", reply_markup=support_menu(cb.from_user.id))

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
@dp.callback_query(lambda c: c.data == "admin_toggle_status")
async def toggle_status(cb: types.CallbackQuery):
    global operator_online
    operator_online = not operator_online
    status = "üü¢ –û–Ω–ª–∞–π–Ω" if operator_online else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
    await cb.message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω: {status}", reply_markup=support_menu(cb.from_user.id))
    await notify_all_clients(f"üì¢ –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Ç–µ–ø–µ—Ä—å {status.lower()}.")

# –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
@dp.message(lambda m: m.from_user.id != ADMIN_ID)
async def forward_to_admin(msg: types.Message):
    global operator_online
    if not operator_online:
        return await msg.answer("‚ö† –í—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –æ—Ñ—Ñ–ª–∞–π–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    uid = msg.from_user.id
    username = msg.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"
    text = msg.text
    all_clients.add(uid)

    if uid not in dialogues:
        dialogues[uid] = {"username": username, "last_msg": text, "messages": 1, "last_time": time.time()}
    else:
        dialogues[uid]["last_msg"] = text
        dialogues[uid]["messages"] += 1
        dialogues[uid]["last_time"] = time.time()

    last_active[uid] = time.time()
    sent = await support_bot.send_message(
        ADMIN_ID,
        f"üì© <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username}</b> (ID: {uid}):\n\n{text}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"close_dialog_{uid}")]
        ])
    )
    client_cache[sent.message_id] = uid
    await msg.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

# –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞
@dp.message(lambda m: m.from_user.id == ADMIN_ID)
async def reply_to_client(msg: types.Message):
    if msg.reply_to_message and msg.reply_to_message.message_id in client_cache:
        uid = client_cache[msg.reply_to_message.message_id]
        await support_bot.send_message(uid, f"üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{msg.text}")
        await msg.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.")
    else:
        await msg.answer("‚ö† –û—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞.")

# –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥
@dp.callback_query(lambda c: c.data.startswith("close_dialog_"))
async def close_dialog(cb: types.CallbackQuery):
    uid = int(cb.data.split("_")[2])
    if uid in dialogues:
        await support_bot.send_message(uid, "üîí –í–∞—à –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±—ã–ª –∑–∞–∫—Ä—ã—Ç.")
        del dialogues[uid]
        await cb.message.answer(f"‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID {uid} –∑–∞–∫—Ä—ã—Ç.", reply_markup=support_menu(cb.from_user.id))
    else:
        await cb.answer("‚ùå –î–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")

# –î–∏–∞–ª–æ–≥–∏
@dp.callback_query(lambda c: c.data == "admin_dialogs")
async def admin_dialogs(cb: types.CallbackQuery):
    if not dialogues:
        return await cb.message.answer("üìÇ <b>–î–∏–∞–ª–æ–≥–∏ –ø—É—Å—Ç—ã.</b>", reply_markup=support_menu(cb.from_user.id))
    text = "üìÇ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏:</b>\n\n"
    for uid, data in dialogues.items():
        time_str = datetime.fromtimestamp(data['last_time']).strftime("%d.%m %H:%M")
        text += f"üë§ @{data['username']} (ID: {uid})\nüí¨ {data['last_msg']}\nüïí {time_str}\n\n"
    await cb.message.answer(text, reply_markup=support_menu(cb.from_user.id))

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.callback_query(lambda c: c.data == "admin_stats")
async def admin_stats(cb: types.CallbackQuery):
    if not dialogues:
        return await cb.message.answer("üìä <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.</b>", reply_markup=support_menu(cb.from_user.id))
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
    for uid, data in dialogues.items():
        time_str = datetime.fromtimestamp(data['last_time']).strftime("%d.%m %H:%M")
        text += f"üë§ @{data['username']} | –°–æ–æ–±—â–µ–Ω–∏–π: {data['messages']} | –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {time_str}\n"
    await cb.message.answer(text, reply_markup=support_menu(cb.from_user.id))

# –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
@dp.callback_query(lambda c: c.data == "admin_auto_replies")
async def admin_auto_replies(cb: types.CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=txt[:30] + "..." if len(txt) > 30 else txt, callback_data=f"send_auto_{i}")]
        for i, txt in enumerate(auto_replies)
    ])
    kb.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_admin")])
    await cb.message.answer("‚ö° <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç:</b>", reply_markup=kb)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–∞
@dp.callback_query(lambda c: c.data.startswith("send_auto_"))
async def send_auto_reply(cb: types.CallbackQuery):
    idx = int(cb.data.split("_")[2])
    if not dialogues:
        return await cb.message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.", reply_markup=support_menu(cb.from_user.id))
    last_uid = list(dialogues.keys())[-1]
    await support_bot.send_message(last_uid, f"üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{auto_replies[idx]}")
    await cb.message.answer(f"‚úÖ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω @{dialogues[last_uid]['username']}", reply_markup=support_menu(cb.from_user.id))

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(support_bot)

if __name__ == "__main__":
    asyncio.run(main())
