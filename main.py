import asyncio
import json
import os
import time
import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

# üîë –ö–æ–Ω—Ñ–∏–≥
CLIENT_TOKEN = os.getenv("CLIENT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

MENU_PHOTO = "https://i.ibb.co/5g1VNg9P/menu.jpg"
GAME_PHOTOS = {
    "Roblox": "https://th.bing.com/th/id/R.076d146437ffc79cebc36bf2ded91196?rik=C%2f9D3lpgvSBUiw&pid=ImgRaw&r=0",
    "Free Fire": "https://dl.dir.freefiremobile.com/common/web_event/official2.ff.garena.all/20236/5393e837d1d7a223f0e3d024054de618.jpg",
    "Brawl Stars": "https://supercell.com/images/1a5b69311180a4a1c374e10556941f05/hero_bg_brawlstars.a385872a.jpg",
    "Clash Royale": "https://th.bing.com/th/id/R.32edca680f22f3a9af3a1c337a3e815d?rik=9FhK2PEi8c4psQ&pid=ImgRaw&r=0"
}

ORDERS_FILE = "orders.json"
orders = {}
archive = []

PRICE_PER_ROBUX_RUB = 0.85
PRICE_PER_ROBUX_KZT = 5.7

FREE_FIRE_PACKS = {100: 90, 310: 270, 520: 450, 1060: 900, 2180: 1800, 5600: 4600}
BRAWL_PACKS = {30: 360, 80: 800, 170: 1600, 360: 3000, 950: 5000, 2000: 10000}
CLASH_PACKS = {80: 100, 500: 500, 1200: 1000, 2500: 2000, 6500: 5000}

ORDER_LIFETIME = 600
ROBLOX_STOCK = 20000

GAMES = {
    "Roblox": ["Log+Pass", "GamePass"],
    "Free Fire": ["Player ID"],
    "Brawl Stars": ["Player Tag"],
    "Clash Royale": ["Player Tag"]
}

bot = Bot(token=CLIENT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

# === FSM ===
class OrderStates(StatesGroup):
    game = State()
    method = State()
    nickname = State()
    password = State()
    robux = State()
    package = State()
    currency = State()
    payment = State()

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ ===
def save_orders():
    with open(ORDERS_FILE, "w", encoding="utf-8") as f:
        json.dump({"orders": orders, "archive": archive}, f, ensure_ascii=False, indent=4)

def load_orders():
    global orders, archive
    if os.path.exists(ORDERS_FILE):
        with open(ORDERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            orders.update(data.get("orders", {}))
            archive.extend(data.get("archive", []))

def cleanup_orders():
    now = time.time()
    expired = [oid for oid, o in orders.items() if now - o['timestamp'] > ORDER_LIFETIME and o['status'] != '–ù–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏']
    for oid in expired:
        archive.append(orders.pop(oid))
    save_orders()

# === –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∏–∫–∞ ===
def validate_nickname(game, value):
    value = value.strip()
    if game == "Free Fire":
        digits = re.sub(r"\s", "", value)
        return digits.isdigit() and len(digits) == 10
    elif game in ["Brawl Stars", "Clash Royale"]:
        return value.startswith("#") and 4 <= len(value) <= 15
    elif game == "Roblox":
        return re.fullmatch(r"^[A-Za-z0-9_]{3,20}$", value) is not None
    return False

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu(user_id):
    buttons = [
        [InlineKeyboardButton(text="üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="order")],
        [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
        [InlineKeyboardButton(text="üì¢ –û—Ç–∑—ã–≤—ã", web_app=WebAppInfo(url="https://ddamir-bit.github.io/GamePayreview/"))],
        [InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/gpadmin4_bot")]
    ]
    if user_id == ADMIN_ID:
        buttons.append([InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command("start"))
async def start_client(msg: types.Message):
    await msg.answer_photo(MENU_PHOTO,
        caption="üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GamePay!</b>\nüí∏ –ë—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ–Ω–∞—Ç.\nüëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu(msg.from_user.id))

# === –í—ã–±–æ—Ä –∏–≥—Ä—ã ===
@dp.callback_query(lambda c: c.data == "order")
async def choose_game(cb: types.CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=g, callback_data=f"game_{g}")] for g in GAMES])
    await state.set_state(OrderStates.game)
    await cb.message.answer_photo(MENU_PHOTO, caption="üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:</b>", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("game_"))
async def choose_method(cb: types.CallbackQuery, state: FSMContext):
    game = cb.data.split("_", 1)[1]
    await state.update_data(game=game)
    methods = GAMES[game]
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=m, callback_data=f"method_{m}")] for m in methods])
    stock = f"\nüì¶ –ù–∞–ª–∏—á–∏–µ: {ROBLOX_STOCK} —Ä–æ–±—É–∫—Å–æ–≤" if game == "Roblox" else ""
    await state.set_state(OrderStates.method)
    await cb.message.answer_photo(GAME_PHOTOS[game], caption=f"üéØ {game}{stock}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥:", reply_markup=kb)

@dp.callback_query(lambda c: c.data.startswith("method_"))
async def input_nickname(cb: types.CallbackQuery, state: FSMContext):
    method = cb.data.split("_", 1)[1]
    data = await state.get_data()
    oid = str(int(time.time()))
    orders[oid] = {
        "id": oid,
        "user_id": cb.from_user.id,
        "username": cb.from_user.username,
        "game": data["game"],
        "method": method,
        "status": "–û–∂–∏–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        "timestamp": time.time()
    }
    save_orders()
    await state.update_data(order_id=oid)
    await state.set_state(OrderStates.nickname)
    await cb.message.answer(f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫/ID ({'c #' if data['game'] in ['Brawl Stars','Clash Royale'] else ''}):")

# === –ù–∏–∫–Ω–µ–π–º ===
@dp.message(OrderStates.nickname)
async def process_nickname(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    oid = data["order_id"]
    order = orders[oid]
    if not validate_nickname(order["game"], msg.text):
        return await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    order["nickname"] = msg.text.strip()

    if order["method"] == "Log+Pass":
        await state.set_state(OrderStates.password)
        await msg.answer("üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ Roblox:")
    elif order["game"] == "Roblox":
        await state.set_state(OrderStates.robux)
        await msg.answer(f"üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±—É–∫—Å–æ–≤ (–¥–æ—Å—Ç—É–ø–Ω–æ: {ROBLOX_STOCK})")
    else:
        packs = FREE_FIRE_PACKS if order["game"]=="Free Fire" else BRAWL_PACKS if order["game"]=="Brawl Stars" else CLASH_PACKS
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{k} –∑–∞ {v}‚ÇΩ", callback_data=f"pack_{oid}_{k}_{v}")] for k,v in packs.items()
        ])
        await state.set_state(OrderStates.package)
        await msg.answer("üíé –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç:", reply_markup=kb)
    save_orders()

# === –ü–∞—Ä–æ–ª—å Roblox ===
@dp.message(OrderStates.password)
async def process_password(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    order = orders[data["order_id"]]
    order["password"] = msg.text.strip()
    await state.set_state(OrderStates.robux)
    await msg.answer(f"üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–±—É–∫—Å–æ–≤ (–¥–æ—Å—Ç—É–ø–Ω–æ: {ROBLOX_STOCK})")
    save_orders()

# === –†–æ–±—É–∫—Å—ã ===
@dp.message(OrderStates.robux)
async def process_robux(msg: types.Message, state: FSMContext):
    if not msg.text.isdigit():
        return await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    robux = int(msg.text)
    data = await state.get_data()
    order = orders[data["order_id"]]
    if robux > ROBLOX_STOCK:
        return await msg.answer(f"‚ùå –ü—Ä–µ–≤—ã—à–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ ({ROBLOX_STOCK})")
    order["robux"] = robux
    await state.set_state(OrderStates.currency)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –ÆMoney (‚ÇΩ)", callback_data="pay_rub")],
        [InlineKeyboardButton(text="üá∞üáø Kaspi (‚Ç∏)", callback_data="pay_kzt")]
    ])
    await msg.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
    save_orders()

# === –ü–∞–∫–µ—Ç—ã ===
@dp.callback_query(lambda c: c.data.startswith("pack_"))
async def select_pack(cb: types.CallbackQuery, state: FSMContext):
    _, oid, amount, price = cb.data.split("_")
    order = orders[oid]
    order["robux"] = int(amount)
    order["price"] = int(price)
    await state.set_state(OrderStates.currency)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –ÆMoney (‚ÇΩ)", callback_data="pay_rub")],
        [InlineKeyboardButton(text="üá∞üáø Kaspi (‚Ç∏)", callback_data="pay_kzt")]
    ])
    await cb.message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

# === –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã ===
        # === –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã ===
            # === –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã ===
@dp.callback_query(lambda c: c.data.startswith("pay_"), OrderStates.currency)
async def choose_currency(cb: types.CallbackQuery, state: FSMContext):
                currency = "‚ÇΩ" if cb.data.endswith("rub") else "‚Ç∏"
                data = await state.get_data()
                order = orders[data["order_id"]]
                order["currency"] = currency

                # üíµ –¶–µ–Ω–∞
                if order["game"] == "Roblox":
                    price = order["robux"] * (PRICE_PER_ROBUX_RUB if currency == "‚ÇΩ" else PRICE_PER_ROBUX_KZT)
                else:
                    price = order["price"]
                    if currency == "‚Ç∏":  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä
                        price *= 6

                order["price"] = price
                order["status"] = "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"
                save_orders()

                await state.set_state(OrderStates.payment)
                await cb.message.answer_photo(
                    GAME_PHOTOS[order["game"]],
                    caption=(f"üõí <b>–ó–∞–∫–∞–∑ #{order['id']}</b>\nüéÆ {order['game']}\nüë§ –ù–∏–∫: {order['nickname']}\n"
                             f"üíé –°—É–º–º–∞: {price} {currency}\n\nüö® –û–ø–ª–∞—Ç–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç!\n\n"
                             "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã:\n‚Ä¢ –ÆMoney: 5599 0020 8114 9975\n‚Ä¢ Kaspi: +4400 4303 8120 7254\n\n"
                             "üì§ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ (—Å–∫—Ä–∏–Ω—à–æ—Ç) —Å—é–¥–∞."),
                )




# === –ü—Ä–∏—ë–º —á–µ–∫–∞ ===
@dp.message(OrderStates.payment)
async def receive_check(msg: types.Message, state: FSMContext):
    if not msg.photo:
        return await msg.answer("‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞!")
    data = await state.get_data()
    order = orders[data["order_id"]]
    order["check"] = msg.photo[-1].file_id
    order["status"] = "–ù–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏"
    save_orders()

    kb_admin = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order['id']}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{order['id']}")]
    ])
    await msg.answer("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω, –∂–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!")
    await bot.send_photo(
        ADMIN_ID, msg.photo[-1].file_id,
        caption=(f"üö® –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order['id']}\nüéÆ {order['game']}\nüë§ {order['nickname']}\n"
                 f"{'üîë –ü–∞—Ä–æ–ª—å: '+order.get('password','') if order['method']=='Log+Pass' else ''}\n"
                 f"üíé –°—É–º–º–∞: {order['price']} {order['currency']}"),
        reply_markup=kb_admin
    )
    await state.clear()

# === –ü—Ä–∏–Ω—è—Ç–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º ===
@dp.callback_query(lambda c: c.data.startswith("accept_") or c.data.startswith("decline_"))
async def handle_admin_decision(cb: types.CallbackQuery):
    oid = cb.data.split("_")[1]
    order = orders.get(oid)
    if not order:
        return await cb.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    if cb.data.startswith("accept_"):
        order["status"] = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"
        await bot.send_message(order["user_id"], f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{oid} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        await cb.message.edit_caption(cb.message.caption + "\n\n‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!", reply_markup=None)
    else:
        order["status"] = "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω"
        await bot.send_message(order["user_id"], f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{oid} –æ—Ç–∫–ª–æ–Ω—ë–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        await cb.message.edit_caption(cb.message.caption + "\n\n‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω.", reply_markup=None)

    save_orders()
    await cb.answer("–ì–æ—Ç–æ–≤–æ!")

# === –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@dp.callback_query(lambda c: c.data == "my_orders")
async def show_orders(cb: types.CallbackQuery):
    user_orders = [o for o in orders.values() if o["user_id"] == cb.from_user.id]
    if not user_orders:
        return await cb.message.answer("üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
    text = "üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    for o in user_orders:
        text += f"üÜî #{o['id']} | üéÆ {o['game']} | üíé {o.get('robux','')} | –°—Ç–∞—Ç—É—Å: {o['status']}\n"
    await cb.message.answer(text)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    load_orders()
    asyncio.create_task(order_cleanup_loop())
    await dp.start_polling(bot)

async def order_cleanup_loop():
    while True:
        cleanup_orders()
        await asyncio.sleep(300)

if __name__ == "__main__":
    asyncio.run(main())
